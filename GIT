<b>Git, Github et GitLab
<b>Les bases de git
<b>Configuration de git
<b>Intéragir avec Github ou GitLab en SSH
<b>Réécrire l’histoire avec Rebase
<b>Commandes utiles
<b>Les bases de git
<b>Il est inutile de paraphraser ici l’excellent livre consacré à git disponible gratuitement à cette adresse : https://git-scm.com/book/en/v2
<b>Il est préférable de lire ce livre en anglais, mais il existe une traduction en français à cette adresse : https://git-scm.com/book/fr/v2

<b>Lisez tout particulièrement les chapitres 2.1 et 2.2 pour pouvoir vous débrouiller dans la vie de tous les jours.

<b>Configuration de git
<b>Voici la configuration minimal de git qui permet d’avoir une expérience plus agréable

<b>Editez votre ~/.gitignore

<b>nogit
<b>*.swp
<b>nogit vous permet d’avoir des repértoires dans vos projets dans lesquels vous mettrez tout ce qui n’a pas besoin d'être dans le dépot de source
<b>*.swp les fichiers temporaires de vim

<b>Editez votre ~/.gitconfig

<b>[user]
   <b> name = Prenom Nom
    <b>email = prenom.nom@univ.fr

<b>[color]
   <b> ui = auto

<b>[alias]
   <b> lg = log --graph --pretty=tformat:'%Cred%h%Creset -%C(white)%d%Creset %s %Cgreen(%an %ar)%Creset'

<b>[diff]
   <b> mnemonicPrefix = true
   <b> wordRegex = .
   <b> renames = true
<b>Intéragir avec Github ou GitLab en SSH
<b>Le moyen le plus simple, et aussi le plus sûr, est d’utiliser sa clef SSH pour s’authentifier sur Github/GitLab et pouvoir y poster le fruit de son labeur.

<b>Suivre ces étapes pour activer sa clef dans GitLab GitLab and SSH keys

<b>Suivre ces étapes pour activer sa clé SSH dans Github : Connecting to GitHub with SSH

<b>ssh-agent
<b>Si vous avez positionné un mot de passe sur votre clef ssh, vous pouvez utiliser ssh-agent pour ne pas avoir à saisir votre mot de passe à chaque fois.

<b>Si votre envirronement ne lance pas ssh-agent lorsque vous vous loger, ajoutez ces lignes dans votre .zshrc (ou .bashrc).

<b>if ! pgrep -u "$USER" ssh-agent > /dev/null; then
   <b> ssh-agent > ~/.ssh-agent-thing
<b>fi
<b>if [[ "$SSH_AGENT_PID" == "" ]]; then
   <b> eval "$(<~/.ssh-agent-thing)"
<b>fi
<b>Pour savoir si ssh-agent tourne et dispose des bonnes clefs, vous pouvez lancer cette commande

<b>$ ssh-add -l
<b>Et pour que vos clefs soient automatiquement ajoutée à l’agent, vous pouvez ajouter cette ligne à votre ~/.ssh/config

<b>AddKeysToAgent yes
<b>Réécrire l’histoire avec Rebase
<b>git rebase est une commande très puissante qui permet entre autre de réécrire l’histoire d’un dépot (réorganiser les commit, les renommer, les supprimer ou les concaténer).

<b>	Attention, une mauvaise manipulation avec rebase peut détruire des commit
<b>Faites une sauvegarde de votre dépot git si vous n'êtes pas sûr de vous :
<b>$ tar zcvf [depot_git].tar.gz [depot_git]
<b>Voici un exemple où on souhaite concatener 3 commits en un seul.

<b>Si on a un historique comme ceci (du plus récent au plus ancien) :

<b>$ git log --oneline
<b>2cf434e Ajout fonctionnalité 1
<b>3961213 Correction README
<b>9ffae79 Maj README
<b>ddc48dc Ajout README
<b>9d7f275 Ajout Licence
<b>On veut fusionner les 3 commits concernant le README, on doit pour cela travailler sur les 4 derniers commits

<b>$ git rebase -i HEAD~4
<b>git affiche (notez que cette fois les commits sont triés du plus ancien au plus récent) :

<b>pick ddc48dc Ajout README
<b>pick 9ffae79 Maj README
<b>pick 3961213 Correction README
<b>pick 2cf434e Ajout fonctionnalité 1

<b># Rebase 9d7f275..2cf434e onto 9d7f275 (4 commands)
<b>#
<b># Commands:
<b># p, pick = use commit
<b># r, reword = use commit, but edit the commit message
<b># e, edit = use commit, but stop for amending
<b># s, squash = use commit, but meld into previous commit
<b># f, fixup = like "squash", but discard this commit's log message
<b># x, exec = run command (the rest of the line) using shell
<b># d, drop = remove commit
...
<b>On va squasher les commits successifs. On garde le premier et y on fusionne les deux autres. On édite en conséquence et on enregistre :

<b>pick ddc48dc Ajout README
<b>squash 9ffae79 Maj README
<b>squash 3961213 Correction README
<b>pick 2cf434e Ajout fonctionnalité 1

<b># Rebase 9d7f275..2cf434e onto 9d7f275 (4 commands)
...
<b>Là git nous propose d'éditer le message du commit résultant de la fusion des 3 commits

<b># This is a combination of 3 commits.
<b># This is the 1st commit message:
<b>Ajout README

<b># This is the commit message #2:

<b>Maj README

<b># This is the commit message #3:

<b>Correction README

<b># Please enter the commit message for your changes. Lines starting
<b># with '#' will be ignored, and an empty message aborts the commit.
<b>J'édite pour avoir un nouveau message

<b>README

<b># Please enter the commit message for your changes. Lines starting
<b># with '#' will be ignored, and an empty message aborts the commit.
<b>J’enregistre, le rebase se fait et j’obtiens :

<b>$ git log --oneline
<b>e494599 Ajout fonctionnalité 1
<b>bbffc96 README
<b>9d7f275 Ajout Licence
<b>Notez bien que le commit Ajout fonctionnalité 1 a changé d’identifiant, cela signifie que l’histoire a bien été réécrite et que si d’autres personnes en ont récupéré l’ancienne version, ils risquent de perdre tout ou partie de leur travail.

<b>A n’utiliser donc que si vous n’avez pas encore poussé ou que si c’est dans une branche qui n’appartient qu'à vous et que vous n’avez pas encore fusionnée dans une autre branche.

<b>Commandes utiles
<b>Créer une branche distante à partir d’une branche locale

<b>Si on est sur une branche locale qui s’appelle feat-toto faire :

<b>$ git push --set-upstream origin feat-toto
